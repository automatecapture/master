apply plugin: 'java'

def thirdPartyDirectory = "" + rootDir + "/../jars"
//def javaThirdPartyDirectory = "$thirdPartyDirectory/Java"
//def javaThirdPartyLibDirectory = "$javaThirdPartyDirectory/lib"
//def pviThirdPartyLibDirectory = "$thirdPartyDirectory/Perceptive"
//def seleniumThirdPartyLibDirectory = "$thirdPartyDirectory/Selenium"
	
repositories {
		//flatDir name: 'javaThirdPartyLibRepository', dirs: "$javaThirdPartyLibDirectory"
		flatDir name: 'junitRepository', dirs: "$thirdPartyDirectory/junit"
		//flatDir name: 'pavlovRepository', dirs: "$javaThirdPartyLibDirectory/pavlov"
		//flatDir name: 'jsystemRepository', dirs: "$javaThirdPartyLibDirectory/jsystem"
		//flatDir name: 'cxfRepository', dirs: "$javaThirdPartyDirectory/cxf/2.5.2"
		//flatDir name: 'pviRepository', dirs: "$pviThirdPartyLibDirectory"
		//flatDir name: 'Selenium', dirs: "$seleniumThirdPartyLibDirectory"
		maven {
               url "http://devrepositoryd00.pvi.com:8181/content/Perceptive_Internal"
       }
       maven {
               url "http://devrepositoryd00.pvi.com:8181/content/FOSS_Internal"
       }
}
	
dependencies {
	// Pavlov GWT
	//compile group: 'com.pavlov', name: 'pavlov-gwt-core', version: '1.0.0.+'
	//compile group: 'com.pavlov', name: 'pavlov-gwt-jsystem', version: '1.0.0.+'
	
	// Google Gson
	//compile group: 'com.google.gson', name: 'gson', version:'1.6'
	
	// JSystem Core
	//compile group: 'jsystem.framework.system', name: 'jsystemCore'
	
	// JUnit 4.0
	compile group: 'junit', name: 'junit', version: '4.10+'
	
	// ImageNow Libraries
	//compile group: 'com.imagenow.biz', name:'common-biz'
	//compile group: 'com.imagenow.util', name:'common-util'
	//compile group: 'com.imagenow', name:'common-types'
	//compile group: 'com.imagenow', name:'common'
	//compile group: 'com.imagenow', name:'core'
	//compile group: 'com.imagenow', name:'test-common-api'
	//compile group: 'com.imagenow.api', name:'inaml-framework'
	//compile group: 'com.imagenow.api', name:'inaml-messages'
	//compile group: 'com.imagenow.api', name:'inaml-types'
	//compile group: 'com.imagenow.apiserver', name:'integration-server-interface'
	//compile group: 'com.imagenow.apiserver', name:'integration-server-util'
	//compile group: 'com.imagenow.apiserver', name:'interact-business-services-plugin'
	//compile group: 'com.imagenow.www', name:'messageagentstubs'
	
	// Perceptive Libraries 
	//compile group: 'com.perceptivesoftware.qa.sysobj', name:'sysobj'
	//compile group: 'com.perceptivesoftware.qa', name:'nimbus-sysobj'
	//compile group: 'com.perceptivesoftware.qa', name:'sysobj'
	
	// Selenium Libraries
	//compile group: 'org.openqa.selenium', name:'selenium-java-2.34.0-srcs.jar'
	//compile group: 'org.openqa.selenium', name:'selenium-java-2.34.0'
	compile(group: 'junit-dep', name: 'junit-dep', version: '4.11')

	// Libraries for Test Compilation
	//testCompile group: 'Mockito', name:'mockito-all', version: '1.8.5'
	//testCompile group: 'com.pavlov', name: 'pavlov-gwt-junit', version: '1.0.0.+'
    testCompile group: 'xalan', name: 'xalan', version: '2.7.1'

	//testCompile group: 'org.eclipse.birt.runtime.3_7_1', name: 'org.apache.xml.serializer', version: '2.7.1'
	//testCompile group: 'com.thoughtworks.qdox', name: 'qdox', version: '1.12.1'
	//testCompile group: 'org.springframework', name: 'spring-core', version: '3.1.0.RELEASE'
	//testCompile group: 'com.google.guava', name: 'guava', version: '16.0.1'
	

   testCompile(group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.3')
       testCompile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3.1')
   testCompile(group: 'commons-logging', name: 'commons-logging', version: '1.1.1')
   testCompile(group: 'org.json', name: 'json', version: '20080701')
       
       testRuntime(group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3')
       testRuntime(group: 'commons-io', name:'commons-io', version: '2.4');

	
	// Apache Commons Libraries
	runtime group: 'org.apache.commons', name: 'collections-generic', version:'4.01'
	runtime group: 'org.apache.commons', name: 'commons-codec', version:'1.4'
	runtime group: 'org.apache.commons', name: 'commons-httpclient', version:'3.1'
	runtime group: 'org.apache.commons', name: 'commons-discovery', version:'0.2'
	runtime group: 'org.apache.commons', name: 'commons-logging', version:'1.0.4'

	
	
	// Other runtime dependencies
	runtime group: 'org.codehaus.jackson', name: 'jackson-all', version:'1.9.3'
	runtime group: 'org.apache.axis', name: 'axis'
	runtime group: 'com.aqua.sysobj', name: 'cli'
	runtime group: 'javax.xml', name: 'jaxrpc'
	runtime group: 'org.apache.log4j', name: 'log4j', version: '1.2.8'
	runtime group: 'wsdl4j', name: 'wsdl4j', version: '1.5.1'
	
}

//DO NOT CHANGE THESE WITHOUT CONSULTING AUTOMATION ARCHITECTURE TEAM	
sourceSets {
	 main {
		java {
			
		}
		resources {
			
		}
 	}
	test {
		java {
			srcDir 'src/main/controls'
			srcDir 'src/main/fixtures'
			srcDir 'src/main/lib'
			srcDir 'src/main/resources'
			srcDir 'src/main/systemobjects'
			srcDir 'src/main/tests/'
		}
	}

}
         
 def jsystemLibDirectory = "$projectDir/src/main/jars"
 
 assemble.dependsOn configurations.runtime
 assemble << {
 	 def runtimeFiles = configurations.runtime.getFiles()
 	 runtimeFiles.each { File file -> 
 	 						if (file.isDirectory()) {
						            copy {
						                from file
						                into "$jsystemLibDirectory/" + file.getName()
						            }
						        }
						    else {
	 	 						copy {
	                					from file
	                					into jsystemLibDirectory
	                				 }
                				 }
            			}
 	 }
       
 clean << {
 	File libDir = new File(jsystemLibDirectory);
 	if (libDir.exists()) {
 		libDir.eachFile { File file -> file.delete(); }
 	}
 			
 	publishZip.archivePath.delete();
 }
 
 		
 task publishZip(dependsOn: assemble, type: Zip) {
 	from(sourceSets.main.output.classesDir) {   	
    	into 'src/main/classes/'
    }
    
    from(sourceSets.main.output.resourcesDir) {   	
    	into 'src/main/classes/'
    }
    

    
     from("$projectDir"){
    	include 'src/main/lib/'
    	include 'src/main/tests/'
 	}
    
    archiveName = 'AutomationTests.zip'   	
	destinationDir = projectDir
 }
 
 task launchAppium << {
    executeCommand("appium", "Appium REST http interface listener started")
    println 'Now run the tests'   
}


task killAppium << {
def cmd = "killall stop node"
cmd.execute()
}
 
 def executeCommand(String command, String readyMessage) {
    ProcessBuilder builder = new ProcessBuilder(command)
    builder.redirectErrorStream(true)
    Process process = builder.start()
 
    InputStream stdout = process.getInputStream()
    BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))
 
    def line
    while ((line = reader.readLine()) != null) {
        println line
        if (line.contains(readyMessage)) {
            println "${command} is ready"
            break
        }
    }
}
 

